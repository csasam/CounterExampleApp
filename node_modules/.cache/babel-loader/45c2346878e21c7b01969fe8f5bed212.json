{"ast":null,"code":"import _classCallCheck from \"/Users/christian/Desktop/React/counter-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/christian/Desktop/React/counter-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/christian/Desktop/React/counter-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/christian/Desktop/React/counter-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/christian/Desktop/React/counter-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/christian/Desktop/React/counter-app/src/components/counter.jsx\";\n//imrc import react components snippet\nimport React, { Component } from \"react\"; //cc class component snippet\n\nvar Counter =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Counter, _Component);\n\n  function Counter() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Counter);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Counter)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      count: 0\n    };\n    return _this;\n  }\n\n  _createClass(Counter, [{\n    key: \"render\",\n    value: function render() {\n      return (//created react.fragment instead of <div> so we don't have extra div due to index.html\n        React.createElement(React.Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 13\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 14\n          },\n          __self: this\n        }, this.formatCount()), React.createElement(\"button\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 15\n          },\n          __self: this\n        }, \"Increment\"))\n      );\n    } //adding formatCount Method\n\n  }, {\n    key: \"formatCount\",\n    value: function formatCount() {\n      //destructure the object and calling the count property so don't have to keep typing this.state.count\n      var count = this.state.count;\n      return count === 0 ? \"Zero \" : count; //if count = 0 then return \"zero else return count value\"\n    }\n  }]);\n\n  return Counter;\n}(Component);\n\nexport default Counter;","map":{"version":3,"sources":["/Users/christian/Desktop/React/counter-app/src/components/counter.jsx"],"names":["React","Component","Counter","state","count","formatCount"],"mappings":";;;;;;AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CAEA;;IACMC,O;;;;;;;;;;;;;;;;;UAEJC,K,GAAQ;AACNC,MAAAA,KAAK,EAAE;AADD,K;;;;;;6BAGC;AACP,aACE;AACA,4BAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAO,KAAKC,WAAL,EAAP,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAFF;AAFF;AAOD,K,CACD;;;;kCACc;AACZ;AADY,UAEJD,KAFI,GAEM,KAAKD,KAFX,CAEJC,KAFI;AAGZ,aAAOA,KAAK,KAAK,CAAV,GAAc,OAAd,GAAwBA,KAA/B,CAHY,CAG0B;AACvC;;;;EAnBmBH,S;;AAsBtB,eAAeC,OAAf","sourcesContent":["//imrc import react components snippet\nimport React, { Component } from \"react\";\n\n//cc class component snippet\nclass Counter extends Component {\n  //state objects include any data in this counter class\n  state = {\n    count: 0\n  };\n  render() {\n    return (\n      //created react.fragment instead of <div> so we don't have extra div due to index.html\n      <React.Fragment>\n        <span>{this.formatCount()}</span>\n        <button>Increment</button>\n      </React.Fragment>\n    );\n  }\n  //adding formatCount Method\n  formatCount() {\n    //destructure the object and calling the count property so don't have to keep typing this.state.count\n    const { count } = this.state;\n    return count === 0 ? \"Zero \" : count; //if count = 0 then return \"zero else return count value\"\n  }\n}\n\nexport default Counter;\n"]},"metadata":{},"sourceType":"module"}