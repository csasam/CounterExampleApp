{"ast":null,"code":"import _classCallCheck from \"/Users/christian/Desktop/React/counter-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/christian/Desktop/React/counter-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/christian/Desktop/React/counter-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _inherits from \"/Users/christian/Desktop/React/counter-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/christian/Desktop/React/counter-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/christian/Desktop/React/counter-app/src/components/counter.jsx\";\n//imrc import react components snippet\nimport React, { Component } from \"react\"; //cc class component snippet\n\nvar Counter =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Counter, _Component);\n\n  //state objects include any data in this counter class\n  function Counter() {\n    var _this;\n\n    _classCallCheck(this, Counter);\n\n    console.log(\"Constructor\", _assertThisInitialized(_assertThisInitialized(_this)));\n    return _possibleConstructorReturn(_this);\n  } //method to handle increment clicks\n\n\n  _createClass(Counter, [{\n    key: \"handleIncrement\",\n    value: function handleIncrement() {\n      console.log(\"Increment Clicked\");\n    } //rendertags is a method to create list iteratively if tags array has values and outputs text if array is empty\n\n  }, {\n    key: \"renderTags\",\n    value: function renderTags() {\n      if (this.state.tags.length === 0) return React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }, \"No data\");\n      return React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, this.state.tags.map(function (tag) {\n        return React.createElement(\"li\", {\n          key: tag,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 29\n          },\n          __self: this\n        }, tag);\n      }));\n    } //render method\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return (//created react.fragment instead of <div> so we don't have extra div due to index.html\n        React.createElement(React.Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          style: this.styles,\n          className: this.getBadgeClasses(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39\n          },\n          __self: this\n        }, this.formatCount()), React.createElement(\"button\", {\n          onClick: this.handleIncrement,\n          className: \"btn btn-secondary btn-sm\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42\n          },\n          __self: this\n        }, \"Increment\"), this.renderTags())\n      );\n    } //adding\n\n  }, {\n    key: \"getBadgeClasses\",\n    value: function getBadgeClasses() {\n      var classes = \"badge m-2 badge-\";\n      classes += this.state.count === 0 ? \"warning\" : \"primary\";\n      return classes;\n    } //adding formatCount Method\n\n  }, {\n    key: \"formatCount\",\n    value: function formatCount() {\n      //destructure the object and calling the count property so don't have to keep typing this.state.count\n      var count = this.state.count;\n      return count === 0 ? \"Zero \" : count; //if count = 0 then return \"zero else return count value\"\n    }\n  }]);\n\n  return Counter;\n}(Component);\n\nexport default Counter;\n/*\n<React.Fragment>\n        <span style={this.styles} className={this.getBadgeClasses()}>\n          {this.formatCount()}\n        </span>\n        <button className=\"btn btn-secondary btn-sm\">Increment</button>\n        <ul>\n          {this.state.tags.map(tag => (\n            <li key={tag}>{tag}</li>\n          ))}\n        </ul>\n      </React.Fragment>\n*/","map":{"version":3,"sources":["/Users/christian/Desktop/React/counter-app/src/components/counter.jsx"],"names":["React","Component","Counter","console","log","state","tags","length","map","tag","styles","getBadgeClasses","formatCount","handleIncrement","renderTags","classes","count"],"mappings":";;;;;;AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CAEA;;IACMC,O;;;;;AACJ;AAUA,qBAAc;AAAA;;AAAA;;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AADY;AAEb,G,CACD;;;;;sCACkB;AAChBD,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACD,K,CACD;;;;iCACa;AACX,UAAI,KAAKC,KAAL,CAAWC,IAAX,CAAgBC,MAAhB,KAA2B,CAA/B,EAAkC,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAP;AAClC,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKF,KAAL,CAAWC,IAAX,CAAgBE,GAAhB,CAAoB,UAAAC,GAAG;AAAA,eACtB;AAAI,UAAA,GAAG,EAAEA,GAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAeA,GAAf,CADsB;AAAA,OAAvB,CADH,CADF;AAOD,K,CACD;;;;6BACS;AACP,aACE;AACA,4BAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAM,UAAA,KAAK,EAAE,KAAKC,MAAlB;AAA0B,UAAA,SAAS,EAAE,KAAKC,eAAL,EAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACG,KAAKC,WAAL,EADH,CADF,EAIE;AACE,UAAA,OAAO,EAAE,KAAKC,eADhB;AAEE,UAAA,SAAS,EAAC,0BAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAJF,EAUG,KAAKC,UAAL,EAVH;AAFF;AAeD,K,CACD;;;;sCACkB;AAChB,UAAIC,OAAO,GAAG,kBAAd;AACAA,MAAAA,OAAO,IAAI,KAAKV,KAAL,CAAWW,KAAX,KAAqB,CAArB,GAAyB,SAAzB,GAAqC,SAAhD;AACA,aAAOD,OAAP;AACD,K,CACD;;;;kCACc;AACZ;AADY,UAEJC,KAFI,GAEM,KAAKX,KAFX,CAEJW,KAFI;AAGZ,aAAOA,KAAK,KAAK,CAAV,GAAc,OAAd,GAAwBA,KAA/B,CAHY,CAG0B;AACvC;;;;EA1DmBf,S;;AA6DtB,eAAeC,OAAf;AAEA","sourcesContent":["//imrc import react components snippet\nimport React, { Component } from \"react\";\n\n//cc class component snippet\nclass Counter extends Component {\n  //state objects include any data in this counter class\n  state = {\n    count: 0,\n    tags: [\"tag1\", \"tag2\", \"tag3\"]\n  };\n  styles = {\n    fontSize: 10,\n    fontWeight: \"bold\"\n  };\n\n  constructor() {\n    console.log(\"Constructor\", this);\n  }\n  //method to handle increment clicks\n  handleIncrement() {\n    console.log(\"Increment Clicked\");\n  }\n  //rendertags is a method to create list iteratively if tags array has values and outputs text if array is empty\n  renderTags() {\n    if (this.state.tags.length === 0) return <p>No data</p>;\n    return (\n      <ul>\n        {this.state.tags.map(tag => (\n          <li key={tag}>{tag}</li>\n        ))}\n      </ul>\n    );\n  }\n  //render method\n  render() {\n    return (\n      //created react.fragment instead of <div> so we don't have extra div due to index.html\n      <React.Fragment>\n        <span style={this.styles} className={this.getBadgeClasses()}>\n          {this.formatCount()}\n        </span>\n        <button\n          onClick={this.handleIncrement}\n          className=\"btn btn-secondary btn-sm\"\n        >\n          Increment\n        </button>\n        {this.renderTags()}\n      </React.Fragment>\n    );\n  }\n  //adding\n  getBadgeClasses() {\n    let classes = \"badge m-2 badge-\";\n    classes += this.state.count === 0 ? \"warning\" : \"primary\";\n    return classes;\n  }\n  //adding formatCount Method\n  formatCount() {\n    //destructure the object and calling the count property so don't have to keep typing this.state.count\n    const { count } = this.state;\n    return count === 0 ? \"Zero \" : count; //if count = 0 then return \"zero else return count value\"\n  }\n}\n\nexport default Counter;\n\n/*\n<React.Fragment>\n        <span style={this.styles} className={this.getBadgeClasses()}>\n          {this.formatCount()}\n        </span>\n        <button className=\"btn btn-secondary btn-sm\">Increment</button>\n        <ul>\n          {this.state.tags.map(tag => (\n            <li key={tag}>{tag}</li>\n          ))}\n        </ul>\n      </React.Fragment>\n*/\n"]},"metadata":{},"sourceType":"module"}