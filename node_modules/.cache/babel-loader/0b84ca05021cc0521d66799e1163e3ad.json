{"ast":null,"code":"import _objectSpread from \"/Users/christian/Desktop/React/counter-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"/Users/christian/Desktop/React/counter-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/christian/Desktop/React/counter-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/christian/Desktop/React/counter-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/christian/Desktop/React/counter-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/christian/Desktop/React/counter-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/christian/Desktop/React/counter-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/christian/Desktop/React/counter-app/src/App.js\";\nimport React, { Component } from \"react\"; //import logo from './logo.svg';\n\nimport NavBar from \"./components/navBar\";\nimport \"./App.css\"; //import Counter from \"./components/counter\";\n\nimport Counters from \"./components/counters\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  //lifecycle hooks phases in react (mount phase, update phase, Unmount phase)\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      counters: [{\n        cs: 1,\n        value: 0\n      }, {\n        cs: 2,\n        value: 0\n      }, {\n        cs: 3,\n        value: 0\n      }]\n    };\n\n    _this.handleIncrement = function (counter) {\n      //console.log(\"1st counter\", counter);\n      var counters = _toConsumableArray(_this.state.counters);\n\n      var index = counters.indexOf(counter); //create a clone of counter array so you don't edit state counters.  gets index of what is being clicked.\n\n      counters[index] = _objectSpread({}, counter);\n      counters[index].value++;\n      console.log(_this.state.counters[index]);\n\n      _this.setState({\n        counters: counters\n      });\n    };\n\n    _this.handleReset = function () {\n      //call a new array and reset to zero using arrow function and map function, then return\n      var counters = _this.state.counters.map(function (c) {\n        c.value = 0;\n        return c;\n      });\n\n      console.log(\"Handler Reset\", counters);\n\n      _this.setState({\n        counters: counters\n      });\n    };\n\n    _this.handleDelete = function (counterId) {\n      console.log(\"Handler Delete\", counterId); //list comprehension to use filter method that only shows items that was not clicked.\n\n      var counters = _this.state.counters.filter(function (c) {\n        return c.cs !== counterId;\n      });\n\n      _this.setState({\n        counters: counters\n      });\n    };\n\n    console.log(\"App - Constructor\");\n    _this.state = _this.props.something;\n    return _this;\n  } //this is where you make ajax calls to get data from the server\n\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      console.log(\"App - Mounted\"); //Ajax Call\n\n      this.setState({\n        /*ajax call here*/\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, React.createElement(NavBar //creates counter of total items in array that are not zero\n      , {\n        totalCounters: this.state.counters.filter(function (c) {\n          return c.value > 0;\n        }).length,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }), React.createElement(\"main\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, React.createElement(Counters //events that are raised by the Counters component\n      , {\n        counters: this.state.counters,\n        onReset: this.handleReset,\n        onIncrement: this.handleIncrement,\n        onDelete: this.handleDelete,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/christian/Desktop/React/counter-app/src/App.js"],"names":["React","Component","NavBar","Counters","App","props","state","counters","cs","value","handleIncrement","counter","index","indexOf","console","log","setState","handleReset","map","c","handleDelete","counterId","filter","something","length"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n//import logo from './logo.svg';\nimport NavBar from \"./components/navBar\";\nimport \"./App.css\";\n//import Counter from \"./components/counter\";\nimport Counters from \"./components/counters\";\n\nclass App extends Component {\n  state = {\n    counters: [{ cs: 1, value: 0 }, { cs: 2, value: 0 }, { cs: 3, value: 0 }]\n  };\n  //lifecycle hooks phases in react (mount phase, update phase, Unmount phase)\n  constructor(props) {\n    super(props);\n    console.log(\"App - Constructor\");\n    this.state = this.props.something;\n  }\n  //this is where you make ajax calls to get data from the server\n  componentDidMount() {\n    console.log(\"App - Mounted\");\n    //Ajax Call\n    this.setState({\n      /*ajax call here*/\n    });\n  }\n\n  handleIncrement = counter => {\n    //console.log(\"1st counter\", counter);\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    //create a clone of counter array so you don't edit state counters.  gets index of what is being clicked.\n    counters[index] = { ...counter };\n    counters[index].value++;\n    console.log(this.state.counters[index]);\n    this.setState({ counters });\n  };\n  handleReset = () => {\n    //call a new array and reset to zero using arrow function and map function, then return\n    const counters = this.state.counters.map(c => {\n      c.value = 0;\n      return c;\n    });\n    console.log(\"Handler Reset\", counters);\n    this.setState({ counters });\n  };\n  handleDelete = counterId => {\n    console.log(\"Handler Delete\", counterId);\n    //list comprehension to use filter method that only shows items that was not clicked.\n    const counters = this.state.counters.filter(c => c.cs !== counterId);\n    this.setState({ counters });\n  };\n  render() {\n    return (\n      <React.Fragment>\n        <NavBar\n          //creates counter of total items in array that are not zero\n          totalCounters={this.state.counters.filter(c => c.value > 0).length}\n        />\n        <main className=\"container\">\n          <Counters\n            //events that are raised by the Counters component\n            counters={this.state.counters}\n            onReset={this.handleReset}\n            onIncrement={this.handleIncrement}\n            onDelete={this.handleDelete}\n          />\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}