{"ast":null,"code":"import _classCallCheck from \"/Users/christian/Desktop/React/counter-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/christian/Desktop/React/counter-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/christian/Desktop/React/counter-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/christian/Desktop/React/counter-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/christian/Desktop/React/counter-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/christian/Desktop/React/counter-app/src/components/counter.jsx\";\n//imrc import react components snippet\nimport React, { Component } from \"react\"; //cc class component snippet\n\nvar Counter =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Counter, _Component);\n\n  function Counter() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Counter);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Counter)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.styles = {\n      fontSize: 10,\n      fontWeight: \"bold\"\n    };\n    return _this;\n  }\n\n  _createClass(Counter, [{\n    key: \"render\",\n    //render method that will create a new react element that has div with 3 children (span, button, list)\n    value: function render() {\n      var _this2 = this;\n\n      //console.log(\"props\", this.props);\n      return (//(not used anymore)created react.fragment instead of <div> so we don't have extra div due to index.html\n        //<h4>Product ID #{this.props.id}</h4>\n        React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 25\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          style: this.styles,\n          className: this.getBadgeClasses(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 26\n          },\n          __self: this\n        }, this.formatCount()), React.createElement(\"button\", {\n          //onClick={this.handleIncrement} was deleted\n          onClick: function onClick() {\n            return _this2.props.onIncrement(_this2.props.counter);\n          },\n          className: \"btn btn-secondary btn-sm\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 29\n          },\n          __self: this\n        }, \"Increment\"), React.createElement(\"button\", {\n          onClick: function onClick() {\n            return _this2.props.onDelete(_this2.props.counter.cs);\n          },\n          className: \"btn btn-danger btn-sm m-2\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 36\n          },\n          __self: this\n        }, \"Delete\"))\n      );\n    }\n    /*this constructor method binds \"this\" to the onClick event handler method called handleIncrement for the button\n    //need this binding method to allow method handleIncrement() to see state attributes\n    constructor() {\n      super();\n      this.handleIncrement = this.handleIncrement.bind(this);\n    }\n    //method to handle increment clicks and setState updates count in state object\n    handleIncrement(product) {\n      //console.log(\"Increment Clicked\", this);\n      console.log(product);\n      this.setState({ count: this.state.count + 1 });\n    }\n    handleIncrement = () => {\n      this.setState({ value: this.state.value + 1 });\n    };*/\n    //pass arguments to the handleIncrement method.  this is too cumbersome so instead I used an inline fuction, see onClick\n    //doHandleIcrement = () => {\n    //this.handleIncrement({ id: 1 });};\n    //adding\n\n  }, {\n    key: \"getBadgeClasses\",\n    value: function getBadgeClasses() {\n      //use let since we are modifying the classes variable.  add warning or primary to end ot badge-\n      var classes = \"badge m-2 badge-\";\n      classes += this.props.counter.value === 0 ? \"warning\" : \"primary\";\n      return classes;\n    } //adding formatCount Method. used to update count property in object \"state\"\n\n  }, {\n    key: \"formatCount\",\n    value: function formatCount() {\n      //destructure the object and calling the count property so don't have to keep typing this.state.count\n      var value = this.props.counter.value;\n      return value === 0 ? \"Zero \" : value; //if count = 0 then return \"zero else return count value\"\n    } //rendertags is a method to create list iteratively if tags array has values and outputs text if array is empty\n\n    /*renderTags() {\n      if (this.state.tags.length === 0) return null;\n      return (\n        <ul>\n          {this.state.tags.map(tag => (\n            <li key={tag}>{tag}</li>\n          ))}\n        </ul>\n      );\n    }*/\n\n  }]);\n\n  return Counter;\n}(Component);\n\nexport default Counter;\n/*\n<React.Fragment>\n        <span style={this.styles} className={this.getBadgeClasses()}>\n          {this.formatCount()}\n        </span>\n        <button className=\"btn btn-secondary btn-sm\">Increment</button>\n        <ul>\n          {this.state.tags.map(tag => (\n            <li key={tag}>{tag}</li>\n          ))}\n        </ul>\n      </React.Fragment>\n*/","map":{"version":3,"sources":["/Users/christian/Desktop/React/counter-app/src/components/counter.jsx"],"names":["React","Component","Counter","styles","fontSize","fontWeight","getBadgeClasses","formatCount","props","onIncrement","counter","onDelete","cs","classes","value"],"mappings":";;;;;;AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CAEA;;IACMC,O;;;;;;;;;;;;;;;;;UAQJC,M,GAAS;AACPC,MAAAA,QAAQ,EAAE,EADH;AAEPC,MAAAA,UAAU,EAAE;AAFL,K;;;;;;AAKT;6BACS;AAAA;;AACP;AAEA,aACE;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAK,UAAA,KAAK,EAAE,KAAKF,MAAjB;AAAyB,UAAA,SAAS,EAAE,KAAKG,eAAL,EAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACG,KAAKC,WAAL,EADH,CADF,EAIE;AACE;AACA,UAAA,OAAO,EAAE;AAAA,mBAAM,MAAI,CAACC,KAAL,CAAWC,WAAX,CAAuB,MAAI,CAACD,KAAL,CAAWE,OAAlC,CAAN;AAAA,WAFX;AAGE,UAAA,SAAS,EAAC,0BAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAJF,EAWE;AACE,UAAA,OAAO,EAAE;AAAA,mBAAM,MAAI,CAACF,KAAL,CAAWG,QAAX,CAAoB,MAAI,CAACH,KAAL,CAAWE,OAAX,CAAmBE,EAAvC,CAAN;AAAA,WADX;AAEE,UAAA,SAAS,EAAC,2BAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAXF;AAHF;AAsBD;AACD;;;;;;;;;;;;;;;AAeA;AACA;AACA;AACA;;;;sCAEkB;AAChB;AACA,UAAIC,OAAO,GAAG,kBAAd;AACAA,MAAAA,OAAO,IAAI,KAAKL,KAAL,CAAWE,OAAX,CAAmBI,KAAnB,KAA6B,CAA7B,GAAiC,SAAjC,GAA6C,SAAxD;AACA,aAAOD,OAAP;AACD,K,CACD;;;;kCACc;AACZ;AADY,UAEJC,KAFI,GAEM,KAAKN,KAAL,CAAWE,OAFjB,CAEJI,KAFI;AAGZ,aAAOA,KAAK,KAAK,CAAV,GAAc,OAAd,GAAwBA,KAA/B,CAHY,CAG0B;AACvC,K,CACD;;AACA;;;;;;;;;;;;;;EAzEoBb,S;;AAqFtB,eAAeC,OAAf;AAEA","sourcesContent":["//imrc import react components snippet\nimport React, { Component } from \"react\";\n\n//cc class component snippet\nclass Counter extends Component {\n  //state objects include any data in this counter class\n  /*state = {\n    value: this.props.counter.value,\n    tags: [\n      \"tag1\", \"tag2\", \"tag3\"\n    ]\n  };*/\n  styles = {\n    fontSize: 10,\n    fontWeight: \"bold\"\n  };\n\n  //render method that will create a new react element that has div with 3 children (span, button, list)\n  render() {\n    //console.log(\"props\", this.props);\n\n    return (\n      //(not used anymore)created react.fragment instead of <div> so we don't have extra div due to index.html\n      //<h4>Product ID #{this.props.id}</h4>\n      <div>\n        <div style={this.styles} className={this.getBadgeClasses()}>\n          {this.formatCount()}\n        </div>\n        <button\n          //onClick={this.handleIncrement} was deleted\n          onClick={() => this.props.onIncrement(this.props.counter)}\n          className=\"btn btn-secondary btn-sm\"\n        >\n          Increment\n        </button>\n        <button\n          onClick={() => this.props.onDelete(this.props.counter.cs)}\n          className=\"btn btn-danger btn-sm m-2\"\n        >\n          Delete\n        </button>\n      </div>\n    );\n  }\n  /*this constructor method binds \"this\" to the onClick event handler method called handleIncrement for the button\n  //need this binding method to allow method handleIncrement() to see state attributes\n  constructor() {\n    super();\n    this.handleIncrement = this.handleIncrement.bind(this);\n  }\n  //method to handle increment clicks and setState updates count in state object\n  handleIncrement(product) {\n    //console.log(\"Increment Clicked\", this);\n    console.log(product);\n    this.setState({ count: this.state.count + 1 });\n  }\n  handleIncrement = () => {\n    this.setState({ value: this.state.value + 1 });\n  };*/\n  //pass arguments to the handleIncrement method.  this is too cumbersome so instead I used an inline fuction, see onClick\n  //doHandleIcrement = () => {\n  //this.handleIncrement({ id: 1 });};\n  //adding\n\n  getBadgeClasses() {\n    //use let since we are modifying the classes variable.  add warning or primary to end ot badge-\n    let classes = \"badge m-2 badge-\";\n    classes += this.props.counter.value === 0 ? \"warning\" : \"primary\";\n    return classes;\n  }\n  //adding formatCount Method. used to update count property in object \"state\"\n  formatCount() {\n    //destructure the object and calling the count property so don't have to keep typing this.state.count\n    const { value } = this.props.counter;\n    return value === 0 ? \"Zero \" : value; //if count = 0 then return \"zero else return count value\"\n  }\n  //rendertags is a method to create list iteratively if tags array has values and outputs text if array is empty\n  /*renderTags() {\n    if (this.state.tags.length === 0) return null;\n    return (\n      <ul>\n        {this.state.tags.map(tag => (\n          <li key={tag}>{tag}</li>\n        ))}\n      </ul>\n    );\n  }*/\n}\n\nexport default Counter;\n\n/*\n<React.Fragment>\n        <span style={this.styles} className={this.getBadgeClasses()}>\n          {this.formatCount()}\n        </span>\n        <button className=\"btn btn-secondary btn-sm\">Increment</button>\n        <ul>\n          {this.state.tags.map(tag => (\n            <li key={tag}>{tag}</li>\n          ))}\n        </ul>\n      </React.Fragment>\n*/\n"]},"metadata":{},"sourceType":"module"}